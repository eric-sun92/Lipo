import { View } from "./view";
import { createElement, remove, empty, InlineStyleSheet, ClassList } from "./dom";
import { isString } from "./util/types";
import base_css from "../styles/base.css";
export class DOMView extends View {
    static __name__ = "DOMView";
    static tag_name = "div";
    el;
    shadow_el;
    get children_el() {
        return this.shadow_el ?? this.el;
    }
    initialize() {
        super.initialize();
        this.el = this._createElement();
    }
    remove() {
        remove(this.el);
        super.remove();
    }
    stylesheets() {
        return [];
    }
    css_classes() {
        return [];
    }
    render_to(element) {
        element.appendChild(this.el);
        this.render();
    }
    finish() {
        this._has_finished = true;
        this.notify_finished();
    }
    _createElement() {
        return createElement(this.constructor.tag_name, { class: this.css_classes() });
    }
}
export class DOMElementView extends DOMView {
    static __name__ = "DOMElementView";
    class_list;
    initialize() {
        super.initialize();
        this.class_list = new ClassList(this.el.classList);
    }
}
export class DOMComponentView extends DOMElementView {
    static __name__ = "DOMComponentView";
    initialize() {
        super.initialize();
        this.shadow_el = this.el.attachShadow({ mode: "open" });
    }
    stylesheets() {
        return [...super.stylesheets(), base_css];
    }
    empty() {
        empty(this.shadow_el);
        this.class_list.clear();
        this._applied_css_classes = [];
        this._applied_stylesheets = [];
    }
    render() {
        this.empty();
        this._update_stylesheets();
        this._update_css_classes();
    }
    *_stylesheets() {
        for (const style of this.stylesheets()) {
            yield isString(style) ? new InlineStyleSheet(style) : style;
        }
    }
    *_css_classes() {
        yield `bk-${this.model.type.replace(/\./g, "-")}`;
        yield* this.css_classes();
    }
    _applied_stylesheets = [];
    _apply_stylesheets(stylesheets) {
        this._applied_stylesheets.push(...stylesheets);
        stylesheets.forEach((stylesheet) => stylesheet.install(this.shadow_el));
    }
    _applied_css_classes = [];
    _apply_css_classes(classes) {
        this._applied_css_classes.push(...classes);
        this.class_list.add(...classes);
    }
    _update_stylesheets() {
        this._applied_stylesheets.forEach((stylesheet) => stylesheet.uninstall());
        this._applied_stylesheets = [];
        this._apply_stylesheets([...this._stylesheets()]);
    }
    _update_css_classes() {
        this.class_list.remove(this._applied_css_classes);
        this._applied_css_classes = [];
        this._apply_css_classes([...this._css_classes()]);
    }
}
//# sourceMappingURL=dom_view.js.map