import { Annotation, AnnotationView } from "./annotation";
import { Dimensional, MetricLength } from "./dimensional";
import { Range } from "../ranges/range";
import { Range1d } from "../ranges/range1d";
import { Align, Anchor, Orientation, Location } from "../../core/enums";
import * as mixins from "../../core/property_mixins";
import { TextBox } from "../../core/graphics";
import { SideLayout, Panel } from "../../core/layout/side_panel";
import { BBox } from "../../core/util/bbox";
import { TextLayout, FixedLayout } from "../../core/layout";
import { Grid } from "../../core/layout/grid";
import { LinearAxis } from "../axes/linear_axis";
import { Ticker } from "../tickers/ticker";
import { FixedTicker } from "../tickers/fixed_ticker";
import { LinearScale } from "../scales/linear_scale";
import { CoordinateTransform } from "../coordinates/coordinate_mapping";
import { build_view } from "../../core/build_views";
import { clamp } from "../../core/util/math";
import { assert } from "../../core/util/assert";
import { enumerate } from "../../core/util/iterator";
import { process_placeholders, sprintf } from "../../core/util/templating";
import { Enum } from "../../core/kinds";
const { round } = Math;
const LengthSizing = Enum("adaptive", "exact");
export class ScaleBarView extends AnnotationView {
    static __name__ = "ScaleBarView";
    bbox = new BBox();
    label_layout;
    title_layout;
    axis_layout;
    box_layout;
    axis;
    axis_view;
    axis_scale;
    cross_scale;
    range;
    _get_size() {
        const { width, height } = this.bbox;
        const { margin } = this.model;
        return {
            width: width + 2 * margin,
            height: height + 2 * margin,
        };
    }
    initialize() {
        super.initialize();
        const { ticker } = this.model;
        this.axis = new LinearAxis({
            ticker,
            ...mixins.attrs_of(this.model, "bar_", mixins.Line, "axis_"),
        });
        this.range = (() => {
            const { range, orientation } = this.model;
            if (range == "auto") {
                const { frame } = this.parent;
                switch (orientation) {
                    case "horizontal": return frame.x_range;
                    case "vertical": return frame.y_range;
                }
            }
            else {
                return range;
            }
        })();
    }
    async lazy_initialize() {
        await super.lazy_initialize();
        const coordinates = (() => {
            const axis_source = new Range1d();
            const axis_target = new Range1d();
            const cross_source = new Range1d();
            const cross_target = new Range1d();
            this.axis_scale = new LinearScale({ source_range: axis_source, target_range: axis_target });
            this.cross_scale = new LinearScale({ source_range: cross_source, target_range: cross_target });
            if (this.model.orientation == "horizontal") {
                return new CoordinateTransform(this.axis_scale, this.cross_scale);
            }
            else {
                return new CoordinateTransform(this.cross_scale, this.axis_scale);
            }
        })();
        this.axis_view = await build_view(this.axis, { parent: this.plot_view });
        this.axis_view.coordinates = coordinates;
        this.axis_view.panel = new Panel(this.model.orientation == "horizontal" ? "below" : "right");
        this.axis_view.update_layout();
    }
    remove() {
        this.axis_view.remove();
        super.remove();
    }
    connect_signals() {
        super.connect_signals();
        this.connect(this.model.change, () => {
            this.request_render();
        });
        this.connect(this.range.change, () => {
            this.request_render();
        });
    }
    update_layout() {
        this.update_geometry();
        const { panel } = this;
        if (panel != null)
            this.layout = new SideLayout(panel, () => this.get_size());
        else
            this.layout = undefined;
    }
    update_geometry() {
        super.update_geometry();
    }
    get horizontal() {
        return this.model.orientation == "horizontal";
    }
    text_layout(args) {
        const { text, location, align, visuals } = args;
        const { orientation } = this.model;
        const text_box = new TextBox({ text });
        const text_panel = new Panel(location);
        text_box.visuals = visuals.values();
        const text_orientation = (() => {
            switch (location) {
                case "above":
                case "below": return "horizontal";
                default: return orientation;
            }
        })();
        text_box.angle = text_panel.get_label_angle_heuristic(text_orientation);
        text_box.base_font_size = this.plot_view.base_font_size;
        text_box.position = {
            sx: 0,
            sy: 0,
            x_anchor: "left",
            y_anchor: "top",
        };
        text_box.align = "auto";
        const text_layout = new TextLayout(text_box);
        text_layout.absolute = true;
        const horizontal = orientation == "horizontal";
        const halign = horizontal ? align : undefined;
        const valign = !horizontal ? align : undefined;
        text_layout.set_sizing({
            width_policy: "min",
            height_policy: "min",
            visible: text != "" && visuals.doit,
            halign, valign,
        });
        return text_layout;
    }
    compute_geometry() {
        super.compute_geometry();
        const { orientation, bar_length, length_sizing, padding, margin, location } = this.model;
        const { border_line, bar_line } = this.visuals;
        const bar_width = bar_line.line_width.get_value();
        const border_width = border_line.line_width.get_value();
        const { frame } = this.parent;
        const frame_span = orientation == "horizontal" ? frame.bbox.width : frame.bbox.height;
        const bar_length_percent = (() => {
            if (0.0 <= bar_length && bar_length <= 1.0) {
                return bar_length;
            }
            else {
                return clamp(bar_length / frame_span, 0.0, 1.0);
            }
        })();
        const { new_value, new_unit, new_long_unit, scale_factor, exact } = (() => {
            const { unit, dimensional } = this.model;
            const value = this.range.span * bar_length_percent;
            return dimensional.compute(value, unit, length_sizing == "exact");
        })();
        const init_bar_length_px = frame_span * bar_length_percent;
        const bar_length_px = round(init_bar_length_px * scale_factor);
        const label_text = (() => {
            const { label } = this.model;
            return process_placeholders(label, (_, name, format) => {
                switch (name) {
                    case "value": {
                        if (exact) {
                            if (format != null) {
                                return sprintf(format, new_value);
                            }
                            else {
                                return new_value.toFixed(2);
                            }
                        }
                        else {
                            return `${new_value}`;
                        }
                    }
                    case "unit": {
                        switch (format ?? "short") {
                            case "short": return new_unit;
                            case "long": return new_long_unit;
                        }
                    }
                    default: {
                        return "???";
                    }
                }
            });
        })();
        this.label_layout = this.text_layout({
            text: label_text,
            location: this.model.label_location,
            align: this.model.label_align,
            visuals: this.visuals.label_text,
        });
        this.title_layout = this.text_layout({
            text: this.model.title,
            location: this.model.title_location,
            align: this.model.title_align,
            visuals: this.visuals.title_text,
        });
        const bar_size = (() => {
            if (orientation == "horizontal") {
                return { width: bar_length_px, height: bar_width };
            }
            else {
                return { width: bar_width, height: bar_length_px };
            }
        })();
        const axis_layout = this.axis_view.layout;
        assert(axis_layout != null);
        this.axis_layout = axis_layout;
        axis_layout.absolute = true;
        if (orientation == "horizontal") {
            axis_layout.set_sizing({
                width_policy: "fixed", width: bar_size.width,
                height_policy: "min",
                valign: "center",
            });
        }
        else {
            axis_layout.set_sizing({
                width_policy: "min",
                height_policy: "fixed", height: bar_size.height,
                halign: "center",
            });
        }
        this.box_layout = (() => {
            const panels = {
                above: [],
                below: [],
                left: [],
                right: [],
            };
            function spacer(location, spacing) {
                const layout = new FixedLayout();
                layout.absolute = true;
                layout.set_sizing((() => {
                    if (location == "left" || location == "right") {
                        return { width_policy: "fixed", width: spacing };
                    }
                    else {
                        return { height_policy: "fixed", height: spacing };
                    }
                })());
                return layout;
            }
            function insert(layout, location, spacing) {
                if (layout.visible) {
                    panels[location].push(spacer(location, spacing), layout);
                }
            }
            insert(this.label_layout, this.model.label_location, this.model.label_standoff);
            insert(this.title_layout, this.model.title_location, this.model.title_standoff);
            const row = panels.above.length;
            const col = panels.left.length;
            const items = [
                { layout: axis_layout, row, col },
            ];
            for (const [layout, i] of enumerate(panels.above)) {
                items.push({ layout, row: row - i - 1, col });
            }
            for (const [layout, i] of enumerate(panels.below)) {
                items.push({ layout, row: row + i + 1, col });
            }
            for (const [layout, i] of enumerate(panels.left)) {
                items.push({ layout, row, col: col - i - 1 });
            }
            for (const [layout, i] of enumerate(panels.right)) {
                items.push({ layout, row, col: col + i + 1 });
            }
            return new Grid(items);
        })();
        const { box_layout } = this;
        box_layout.absolute = true;
        box_layout.position = { left: padding, top: padding };
        box_layout.set_sizing();
        box_layout.compute();
        const [axis_range, cross_range] = (() => {
            const { x_range, y_range } = this.axis_view.bbox;
            if (orientation == "horizontal") {
                return [x_range, y_range];
            }
            else {
                return [y_range, x_range];
            }
        })();
        this.axis_scale.source_range.end = new_value;
        this.axis_scale.target_range.setv(axis_range);
        this.cross_scale.source_range.end = 1.0;
        this.cross_scale.target_range.setv(cross_range);
        const width = border_width + padding + box_layout.bbox.width + padding + border_width;
        const height = border_width + padding + box_layout.bbox.height + padding + border_width;
        const panel = this.layout != null ? this.layout : this.plot_view.frame;
        const [hr, vr] = panel.bbox.ranges;
        const { sx, sy } = (() => {
            switch (location) {
                case "top_left":
                    return {
                        sx: hr.start + margin,
                        sy: vr.start + margin,
                    };
                case "top":
                case "top_center":
                    return {
                        sx: (hr.end + hr.start) / 2 - width / 2,
                        sy: vr.start + margin,
                    };
                case "top_right":
                    return {
                        sx: hr.end - margin - width,
                        sy: vr.start + margin,
                    };
                case "bottom_right":
                    return {
                        sx: hr.end - margin - width,
                        sy: vr.end - margin - height,
                    };
                case "bottom":
                case "bottom_center":
                    return {
                        sx: (hr.end + hr.start) / 2 - width / 2,
                        sy: vr.end - margin - height,
                    };
                case "bottom_left":
                    return {
                        sx: hr.start + margin,
                        sy: vr.end - margin - height,
                    };
                case "left":
                case "center_left":
                    return {
                        sx: hr.start + margin,
                        sy: (vr.end + vr.start) / 2 - height / 2,
                    };
                case "center":
                case "center_center":
                    return {
                        sx: (hr.end + hr.start) / 2 - width / 2,
                        sy: (vr.end + vr.start) / 2 - height / 2,
                    };
                case "right":
                case "center_right":
                    return {
                        sx: hr.end - margin - width,
                        sy: (vr.end + vr.start) / 2 - height / 2,
                    };
            }
        })();
        this.bbox = new BBox({ left: sx, top: sy, width, height });
    }
    _draw_box(ctx) {
        const { width, height } = this.bbox;
        ctx.beginPath();
        ctx.rect(0, 0, width, height);
        this.visuals.background_fill.apply(ctx);
        this.visuals.background_hatch.apply(ctx);
        this.visuals.border_line.apply(ctx);
    }
    _draw_axis(_ctx) {
        this.axis_view.render();
    }
    _draw_text(ctx, layout, location) {
        const { bbox } = layout;
        const [x_offset, y_offset] = (() => {
            const { orientation } = this.model;
            const horizontal = orientation == "horizontal";
            switch (location) {
                case "left": return horizontal ? [0, 0] : [0, bbox.height];
                case "right": return horizontal ? [0, 0] : [bbox.width, 0];
                case "above": return [0, 0];
                case "below": return [0, 0];
            }
        })();
        const { left, top } = bbox.translate(x_offset, y_offset);
        ctx.translate(left, top);
        layout.text.paint(ctx);
        ctx.translate(-left, -top);
    }
    _draw_label(ctx) {
        this._draw_text(ctx, this.label_layout, this.model.label_location);
    }
    _draw_title(ctx) {
        this._draw_text(ctx, this.title_layout, this.model.title_location);
    }
    _render() {
        // It would be better to update geometry (the internal layout) only when
        // necessary, but conditions for that are not clear, so for now update
        // at every render.
        this.update_geometry();
        this.compute_geometry();
        const { ctx } = this.layer;
        const { left, top } = this.bbox;
        ctx.translate(left, top);
        if (this.box_layout.visible) {
            this._draw_box(ctx);
        }
        if (this.axis_layout.visible) {
            this._draw_axis(ctx);
        }
        if (this.label_layout.visible) {
            this._draw_label(ctx);
        }
        if (this.title_layout.visible) {
            this._draw_title(ctx);
        }
        ctx.translate(-left, -top);
    }
}
export class ScaleBar extends Annotation {
    static __name__ = "ScaleBar";
    constructor(attrs) {
        super(attrs);
    }
    static {
        this.prototype.default_view = ScaleBarView;
        this.mixins([
            ["bar_", mixins.Line],
            ["label_", mixins.Text],
            ["title_", mixins.Text],
            ["border_", mixins.Line],
            ["background_", mixins.Fill],
            ["background_", mixins.Hatch],
        ]);
        this.define(({ NonNegative, Number, String, Ref, Or, Auto }) => ({
            range: [Or(Ref(Range), Auto), "auto"],
            unit: [String, "m"],
            dimensional: [Ref(Dimensional), () => new MetricLength()],
            orientation: [Orientation, "horizontal"],
            bar_length: [NonNegative(Number), 0.2],
            length_sizing: [LengthSizing, "adaptive"],
            location: [Anchor, "top_right"],
            label: [String, "@{value} @{unit}"],
            label_align: [Align, "center"],
            label_location: [Location, "below"],
            label_standoff: [Number, 5],
            title: [String, ""],
            title_align: [Align, "center"],
            title_location: [Location, "above"],
            title_standoff: [Number, 5],
            margin: [Number, 10],
            padding: [Number, 10],
            ticker: [Ref(Ticker), () => new FixedTicker({ ticks: [] })],
        }));
        this.override({
            bar_line_width: 2,
            border_line_color: "#e5e5e5",
            border_line_alpha: 0.5,
            border_line_width: 1,
            background_fill_color: "#ffffff",
            background_fill_alpha: 0.95,
            label_text_font_size: "13px",
            label_text_baseline: "middle",
            title_text_font_size: "13px",
            title_text_font_style: "italic",
        });
    }
}
//# sourceMappingURL=scale_bar.js.map