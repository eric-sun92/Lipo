import { Array, Auto, Enum, Int, Map, NonNegative, Opt, Or, PartialStruct, Percent, Ref, String, Tuple, } from "../../core/kinds";
import * as enums from "../../core/enums";
export const Length = NonNegative(Int);
const XY = (type) => PartialStruct({ x: type, y: type });
const LRTB = (type) => PartialStruct({ left: type, right: type, top: type, bottom: type });
export const Anchor = (Or(enums.Anchor, Tuple(Or(enums.Align, enums.HAlign, Percent), Or(enums.Align, enums.VAlign, Percent))));
export const TextAnchor = Or(Anchor, Auto);
export const Padding = (Or(Length, Tuple(Length, Length), XY(Length), Tuple(Length, Length, Length, Length), LRTB(Length)));
export const BorderRadius = (Or(Length, Tuple(Length, Length, Length, Length), PartialStruct({
    top_left: Length,
    top_right: Length,
    bottom_right: Length,
    bottom_left: Length,
})));
export const Index = NonNegative(Int);
export const Span = NonNegative(Int);
export const GridChild = (child) => Tuple(Ref(child), Index, Index, Opt(Span), Opt(Span));
export const GridSpacing = Or(Length, Tuple(Length, Length));
export const TrackAlign = Enum("start", "center", "end", "auto");
export const TrackSize = String;
export const TrackSizing = PartialStruct({ size: TrackSize, align: TrackAlign });
export const TrackSizingLike = Or(TrackSize, TrackSizing);
export const TracksSizing = Or(TrackSizingLike, Array(TrackSizingLike), Map(Int, TrackSizingLike));
//# sourceMappingURL=kinds.js.map