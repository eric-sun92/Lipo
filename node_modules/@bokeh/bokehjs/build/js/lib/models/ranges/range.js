import { Model } from "../../model";
import { Nullable, Or, Tuple, Number, Auto } from "../../core/kinds";
const Bounds = Nullable(Or(Tuple(Nullable(Number), Nullable(Number)), Auto));
export class Range extends Model {
    static __name__ = "Range";
    constructor(attrs) {
        super(attrs);
    }
    static {
        this.define(({ Number, Nullable }) => ({
            bounds: [Bounds, null, {
                    on_update(bounds, obj) {
                        const [lower, upper] = bounds == "auto" || bounds == null ? [null, null] : bounds;
                        obj._computed_bounds = [lower ?? -Infinity, upper ?? Infinity];
                    },
                }],
            min_interval: [Nullable(Number), null],
            max_interval: [Nullable(Number), null],
        }));
    }
    _computed_bounds;
    get computed_bounds() {
        return this._computed_bounds;
    }
    have_updated_interactively = false;
    get is_reversed() {
        return this.start > this.end;
    }
    get is_valid() {
        return isFinite(this.min) && isFinite(this.max);
    }
    get span() {
        return Math.abs(this.end - this.start);
    }
    /** internal */
    plots = new Set();
}
//# sourceMappingURL=range.js.map